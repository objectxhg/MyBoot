server:
    port: 9000
    servlet:
      context-path: /boot


upload:
  localUrl: "/usr/local/uploadFile/"

spring:
    servlet:
      multipart:
        #单个文件最大长度
        max-file-size: 10MB
        #最大请求文件的大小
        max-request-size: 10MB


    profiles:
      active: dev

    application: 
      name: MyBoot

    # 单例启动 startup.cmd -m standalone
    cloud:
      nacos:
        discovery:
          server-addr: 127.0.0.1:8848  #配置注册中心的位置，也就是nacos的地址
        config:
          #group: boot
          server-addr: 127.0.0.1:8848
          file-extension: yml

      sentinel:
        enabled: true
        eager: true
        transport:
          dashboard: 127.0.0.1:8080
          #java -Dserver.port=8080 --spring.cloud.sentinel.eager=true -jar sentinel-dashboard-1.7.0.jar
          # 也可以启动时主动加入 需要监控的节点
          # -Dcsp.sentinel.dashboard.server=consoleIp:port
          # java -Dserver.port=8080 -Dcsp.sentinel.dashboard.server=localhost:8080 -Dproject.name=sentinel-dashboard -jar sentinel-dashboard-1.7.0.jar
          #启动sentinel服务命令 取消sentinel控制台的懒加载   java -jar xxx.jar Dserver.port=8080 --spring.cloud.sentinel.eager=true

        #sentinel 流控配置
        datasource:
          ds1:
            nacos:
              server-addr: 127.0.0.1:8848 #nacos注册中心
              data-id: MyBoot-sentinel-flow
              data-type: json
              rule-type: flow #流控
  #          ds2:
  #            nacos:
  #              server-addr: 127.0.0.1:8848
  #              data-id: sentinel-degrade
  #              data-type: json
  #              rule-type: degrade #降级


    rabbitmq:
      host: localhost
      port: 5672
      username: user
      password: password
      virtual-host: hostDemo #虚拟主机名称
      connection-timeout: 15000   #超时时间
      # 打开发送到mq的回调 实现ConfirmCallback接口重写回调方法 确认是否成功发送到mq
      publisher-confirm-type: correlated
      # 打开消息返回 实现ReturnCallback接口，重写消息发送失败后重新发送消息
      publisher-returns: true
      template:
        mandatory: true
      dynamic: true
      cache:
        connection:
          mode: channel
      #手动确认消息已被消费
      listener:
        #消息确认机制 --- 是否开启手ack动确认模式
        direct:
          acknowledge-mode: MANUAL
        #消息确认机制 --- 是否开启手ack动确认模式
        simple:
          acknowledge-mode: MANUAL
          #消费端每次想生产者拉取消息的条数。 前提是消费端的确认模式一定为手动确认。
          prefetch: 2

    cache:
      redis:
        type: redis

    redis:
      host: localhost
      prot: 6379
      password: password
      timeout: 10000
      database: 0
      lettuce:
        shutdown-timeout: 100
        pool: 
          max-active: 10 #最大连接数
          max-wait: -1   #最大阻塞等待时间 （使用负值表示没有限制） 默认-1
          max-idle: 8    #最大空闲连接 默认8
          min-idle: 0    #最小空闲连接 默认0
#      sentinel:
#        master: mymaster
#        nodes:
#          - localhost:26379
#          - localhost:26380
#          - localhost:26381

    #mysql数据库
    datasource:
        tomcat-jdbc: com.alibaba.druid.pool.DruidDataSource
        driver-class-name: com.mysql.jdbc.Driver
        url: jdbc:mysql://localhost:3306/boot?serverTimezone=UTC&useUnicode=true&characterEncoding=UTF-8&allowMultiQueries=true&autoReconnect=true&useSSL=false
        #url: jdbc:mysql://localhost:8066/BOOTDB?useUnicode=true&characterEncoding=utf-8&autoReconnect=true&zeroDateTimeBehavior=convertToNull&useSSL=false&serverTimezone=GMT%2B8
        username: root
        password: password
        #username: mycat
        #password: 123456
    devtools:
    restart:
      enabled: true  #设置开启热部署


mybatis: 
    ##\u5B9E\u4F53\u7C7B\u8DEF\u5F84
    typeAliasesPackage: com.xhg.pojo
    mapperLocations: classpath:mapper/*.xml

logging:
    level:
      com.xhg.mapper: debug
    config: classpath:logging-log4j2.yml
        
pagehelper:
  helperDialect: mysql
  reasonable: false #关闭查询超出页数时返回数据问题
  supportMethodsArguments: true
  params: count=countSql


swagger:
  enable: true
